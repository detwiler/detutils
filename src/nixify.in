#! @ENV@ bash
# vim: ft=sh

set -o pipefail

# functions

source @pkgdatadir@/script-functions

function usage()
{
	cat <<- EOF 

	$me: Give files sane unix properties to include:
	  * proper execute permissions
	  * unix line endings in text files
	  * newlines at end of text files

	Usage: $me [-v | -c] [-d] [-n] [-p <name>]... [-m <maxdepth>] <dir>...

	  -v verbose chmod output
	  -c like verbose but report only when a change is made
	  -d run dos2unix if necessary
	  -n add a newline to the end of the file if necessary
	  -p name to prune from the list of files to operate on (defaults
	     include .svn and CVS)
	  -m maxdepth to recurse into subdirectories
	  -V print version
	  -h print usage

	Examples:

	   $me -c include src

	EOF
} # usage()

me="$(basename $0)"
verbose=''
dos2unix=''
newline=''
quiet='--quiet'
maxdepth=''
prunes='-name .git -o -name .svn -o -name CVS'

# process command line options
while getopts ':m:p:cvdnVh' opt; do
  case $opt in
    c ) verbose='--changes'; quiet='';;
    v ) verbose='--verbose'; quiet='';;
    d ) dos2unix='true';;
    n ) newline='true';;
    m ) maxdepth="-maxdepth $OPTARG";;
    p ) prunes="$prunes -o -name $OPTARG";;
    V ) print_version $me; exit 0 ;;
    h ) usage; exit 0 ;;
    \? ) usage >/dev/stderr; exit 1 ;;
  esac
done

shift $(($OPTIND - 1))

dirs="$@"

if [[ -z $dirs ]]; then
  dirs='.'
fi

for file in \
  $(find $dirs $maxdepth \( $prunes \) -prune -o -type f -print); do

  # FIXME this is a hack to get around filenames with spaces
  if [[ ! -e $file ]]; then continue; fi

  file_type="$(@FILE@ --brief $file)"

  if @GREP@ executable <<<$file_type &> /dev/null; then
    chmod a+x $verbose $file
  else
    chmod a-x $verbose $file
  fi

  if [[ -n $dos2unix ]]; then
    if @GREP@ "CRLF" <<<$file_type &> /dev/null; then
      @DOS2UNIX@ $quiet $file
    fi
  fi

  if [[ -n $newline ]]; then
    if @GREP@ "text" <<<$file_type &> /dev/null; then
      if (( $(@TAIL@ --bytes=1 $file | @WC@ --lines) == 0 )); then
        if [[ -n $verbose ]]; then
          debug "Adding newline to $file"
        fi
        @SED@ --in-place '$ s/^.*$/&\n/' $file
      fi
    fi
  fi
done
