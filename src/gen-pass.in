#! @ENV@ bash
# vim: ft=sh

set -o pipefail

# functions

source @pkgdatadir@/script-functions

function usage()
{
	cat <<- EOF

	Usage: $me \\
	         [-s <salt>] \\
	         [-a <hash-algorithm>] \\
	         [-p <prologue>] \\
	         [-e <epilogue>] \\
	         [-r <bytes>] \\
	         [-i <byte>] \\
	         [-f <bytes>] \\
	         [-t] \\
	         [-u | -b | -c]

	  -a secure hash algorithm [1|224|256|384|512] (default: SHA-1)
	  -b base64 encode digest
	  -c ascii85 encode digest
	  -e epilogue
	  -f discard ARG final bytes of digest
	  -i initial byte of digest to begin with
	  -p proloque
	  -r use ARG bytes of random salt
	  -s salt (if neither -s nor -r specified, user will be prompted)
	  -t convert digest to text
	  -u uuencode digest
	  -V print version
	  -h print usage

	Examples:

	$me -p foo -e bar -a 224 -r 32 -t -u

	EOF
} # usage()

function cleanup()
{
  local size="$(@STAT@ --printf='%s' $message)"
  @HEAD@ --bytes=$size /dev/urandom >$message
  size="$(@STAT@ --printf='%s' $digest)"
  @HEAD@ --bytes=$size /dev/urandom >$digest
  rm -f $message $digest
} # cleanup()

function get_salt()
{
  read -s -p 'Enter salt: ' salt
  read -s -p 'Confirm salt: ' check

  if [[ $salt != $check ]]; then
    die 'Salt entries did not match!'
  fi
} # get_salt()

me="$(basename $0)"
verbose=''
salt=''
prologue=''
epilogue=''
sha=''
random=''
text=''
initial='1'
final='0'
uuencode=''
base64=''
ascii85=''
encode=''

while getopts 'p:s:e:a:r:i:f:tubchVh' opt; do
  case $opt in
    p ) prologue=$OPTARG ;;
    s ) salt=$OPTARG ;;
    e ) epilogue=$OPTARG ;;
    a ) sha=$OPTARG ;;
    r ) random=$OPTARG ;;
    i ) initial=$OPTARG ;;
    f ) final=$OPTARG ;;
    t ) text='true' ;;
    u ) uuencode='true' ;;
    b ) base64='true' ;;
    c ) ascii85='true' ;;
    V ) print_version $me; exit 0 ;;
    h ) usage; exit 0 ;;
    \? ) usage >/dev/stderr; exit 1 ;;
  esac
done

shift $(($OPTIND - 1))

if [[ -n $uuencode && ( -n $base64 || -n $ascii85 ) ]]; then
  die 'Only one encoding may be selected!'
fi

if [[ -n $base64 ]]; then
  if [[ -n $ascii85 ]]; then
    die 'Only one encoding may be selected!'
  fi
  encode=@BASE64@
fi

if [[ -n $ascii85 ]]; then
  encode='@BASENC@ --z85'
fi

shacmd=@SHA1SUM@

if [[ -n $sha ]]; then
  case $sha in
    512 ) shacmd=@SHA512SUM@ ;;
    384 ) shacmd=@SHA384SUM@ ;;
    256 ) shacmd=@SHA256SUM@ ;;
    224 ) shacmd=@SHA224SUM@ ;;
    1 ) shacmd=@SHA1SUM@ ;;
    * ) die "Unsupported SHA algorithm $sha" ;;
  esac
fi

declare -A digest_size
digest_size[@SHA1SUM@]=20
digest_size[@SHA224SUM@]=28
digest_size[@SHA256SUM@]=32
digest_size[@SHA384SUM@]=48
digest_size[@SHA512SUM@]=64

if (( ${digest_size[$shacmd]} <= $initial + $final - 1 )); then
  die "You've discarded all ${digest_size[$shacmd]} digest bytes!"
fi
  
if [[ -z $salt && -z $random ]]; then
  get_salt
fi

# message buffer
message=$(@MKTEMP@)

# digest buffer
digest=$(@MKTEMP@)

# cleanup on exit
trap cleanup ERR EXIT

if [[ -n $prologue ]]; then
  printf '%s' "$prologue" >>$message
fi

if [[ -n $salt ]]; then
  printf '%s' "$salt" >>$message
fi

if [[ -n $random ]]; then
  @HEAD@ --bytes=$random /dev/urandom >>$message
fi

if [[ -n $epilogue ]]; then
  printf '%s' "$epilogue" >>$message
fi

$shacmd $message | @CUT@ --delimiter=' ' --fields=1 | @XXD@ -r -p | \
  @HEAD@ --bytes=-$final | @TAIL@ --bytes=+$initial >$digest

if [[ -n $text ]]; then
  # reuse message buffer
  output=$message
  @XXD@ -p $digest >$output
else
  output=$digest
fi

if [[ -n $uuencode ]]; then
  @UUENCODE@ $output /dev/stdout | sed -e '1d' -e '$d' | @TR@ --delete '\n'
elif [[ -n $encode ]]; then
  # input for Ascii85 encoding must be multiple of 4
  if [[ -n $ascii85 ]]; then
    length=$(@STAT@ --format='%s' $output)
    remainder=$(( $length % 4 ))
  else
    remainder=0
  fi
  @HEAD@ --bytes=-$remainder $output | $encode --wrap=0
else
  cat $output
fi
